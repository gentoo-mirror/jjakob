From a6ed983c17cf92533b08cfc780a5490150d6dd08 Mon Sep 17 00:00:00 2001
From: Jernej Jakob <jernej.jakob@gmail.com>
Date: Fri, 29 Sep 2023 12:13:31 +0200
Subject: [PATCH] Delete PEMicro due to dependency on non-free blobs

---
 docs/api/debuggers.rst                 |   8 -
 requirements.txt                       |   2 -
 spsdk/debuggers/__init__.py            |   3 +-
 spsdk/debuggers/debug_probe_pemicro.py | 210 -------------------------
 tools/approved_packages.json           |  12 --
 tools/gitcov-defaults.ini              |   3 +-
 6 files changed, 2 insertions(+), 236 deletions(-)
 delete mode 100644 spsdk/debuggers/debug_probe_pemicro.py

diff --git a/docs/api/debuggers.rst b/docs/api/debuggers.rst
index c5d75bd..2beb667 100644
--- a/docs/api/debuggers.rst
+++ b/docs/api/debuggers.rst
@@ -21,14 +21,6 @@ Module for DebugMailbox Jlink Debug probes support
    :show-inheritance:
 
 
-Module for DebugMailbox Pemicro Debug probes support
------------------------------------------------------
-.. automodule:: spsdk.debuggers.debug_probe_pemicro
-   :members:
-   :undoc-members:
-   :show-inheritance:
-
-
 Module for DebugMailbox PyOCD Debug probes support
 -----------------------------------------------------
 .. automodule:: spsdk.debuggers.debug_probe_pyocd
diff --git a/requirements.txt b/requirements.txt
index b3a095d..7d21484 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -16,9 +16,7 @@ oscrypto<1.4
 platformdirs>=3.9.1,<4.2
 prettytable>=3.0.0,<3.10
 pylink-square>=1.0,<1.3
-pyocd-pemicro>=1.1.5,<1.2
 pyocd>=0.35.1,<0.37
-pypemicro>=0.1.11,<0.2
 pyserial>=3.1,<3.6
 ruamel.yaml>=0.17,<0.19
 requests>=2.0,<2.32
diff --git a/spsdk/debuggers/__init__.py b/spsdk/debuggers/__init__.py
index c2d266b..8d28c77 100644
--- a/spsdk/debuggers/__init__.py
+++ b/spsdk/debuggers/__init__.py
@@ -8,7 +8,6 @@
 """Wrappers for various types of debuggers."""
 
 from .debug_probe_jlink import DebugProbePyLink
-from .debug_probe_pemicro import DebugProbePemicro
 from .debug_probe_pyocd import DebugProbePyOCD
 
-__all__ = ["DebugProbePyLink", "DebugProbePemicro", "DebugProbePyOCD"]
+__all__ = ["DebugProbePyLink", "DebugProbePyOCD"]
diff --git a/spsdk/debuggers/debug_probe_pemicro.py b/spsdk/debuggers/debug_probe_pemicro.py
deleted file mode 100644
index 8bb9709..0000000
--- a/spsdk/debuggers/debug_probe_pemicro.py
+++ /dev/null
@@ -1,210 +0,0 @@
-#!/usr/bin/env python
-# -*- coding: UTF-8 -*-
-#
-# Copyright 2020-2024 NXP
-#
-# SPDX-License-Identifier: BSD-3-Clause
-"""Module for DebugMailbox Pemicro Debug probes support."""
-
-import logging
-from typing import Dict, Optional
-
-from pypemicro import PEMicroException, PEMicroInterfaces, PyPemicro
-
-from spsdk.utils.misc import value_to_int
-
-from .debug_probe import (
-    DebugProbeLocal,
-    DebugProbes,
-    ProbeDescription,
-    SPSDKDebugProbeError,
-    SPSDKDebugProbeNotOpenError,
-    SPSDKDebugProbeTransferError,
-)
-
-logger = logging.getLogger(__name__)
-logger_pypemicro = logger.getChild("PyPemicro")
-
-
-class DebugProbePemicro(DebugProbeLocal):
-    """Class to define Pemicro package interface for NXP SPSDK."""
-
-    NAME = "pemicro"
-
-    @staticmethod
-    def get_options_help() -> Dict[str, str]:
-        """Get full list of options of debug probe.
-
-        :return: Dictionary with individual options. Key is parameter name and value the help text.
-        """
-        options_help = {}
-        options_help.update(
-            {
-                "frequency": "Set the communication frequency in Hz, default is 100_000Hz",
-            }
-        )
-        options_help.update(DebugProbeLocal.get_options_help())
-
-        return options_help
-
-    @classmethod
-    def get_pemicro_lib(cls) -> PyPemicro:
-        """Get Pemicro object.
-
-        :return: The Pemicro Object
-        :raises SPSDKDebugProbeError: The Pemicro object get function failed.
-        """
-        try:
-            return PyPemicro(
-                log_info=logger_pypemicro.info,
-                log_debug=logger_pypemicro.debug,
-                log_err=logger_pypemicro.error,
-                log_war=logger_pypemicro.warn,
-            )
-        except PEMicroException as exc:
-            raise SPSDKDebugProbeError(f"Cannot get Pemicro library: ({str(exc)})") from exc
-
-    def __init__(self, hardware_id: str, options: Optional[Dict] = None) -> None:
-        """The Pemicro class initialization.
-
-        The Pemicro initialization function for SPSDK library to support various DEBUG PROBES.
-        """
-        super().__init__(hardware_id, options)
-
-        self.pemicro: Optional[PyPemicro] = None
-
-        logger.debug("The SPSDK Pemicro Interface has been initialized")
-
-    @classmethod
-    def get_connected_probes(
-        cls, hardware_id: Optional[str] = None, options: Optional[Dict] = None
-    ) -> DebugProbes:
-        """Get all connected probes over Pemicro.
-
-        This functions returns the list of all connected probes in system by Pemicro package.
-
-        :param hardware_id: None to list all probes, otherwise the the only probe with matching
-            hardware id is listed.
-        :param options: The options dictionary
-        :return: probe_description
-        """
-        probes = DebugProbes()
-        try:
-            connected_probes = PyPemicro.list_ports()
-            for probe in connected_probes:
-                if not hardware_id or hardware_id == str(probe["id"]):
-                    probes.append(
-                        ProbeDescription(
-                            "PEMicro", probe["id"], probe["description"], DebugProbePemicro
-                        )
-                    )
-        except PEMicroException as exc:
-            logger.warning(f"Cannot get list of PEMicro probes: {str(exc)}")
-        return probes
-
-    def open(self) -> None:
-        """Open Pemicro interface for NXP SPSDK.
-
-        The Pemicro opening function for SPSDK library to support various DEBUG PROBES.
-        The function is used to initialize the connection to target and enable using debug probe
-        for DAT purposes.
-
-        :raises SPSDKDebugProbeError: The Pemicro cannot establish communication with target
-        """
-        try:
-            self.pemicro = DebugProbePemicro.get_pemicro_lib()
-            if self.pemicro is None:
-                raise SPSDKDebugProbeError("Getting of Pemicro library failed.")
-        except SPSDKDebugProbeError as exc:
-            raise SPSDKDebugProbeError(f"Getting of Pemicro library failed({str(exc)}).") from exc
-        try:
-            self.pemicro.open(debug_hardware_name_ip_or_serialnum=self.hardware_id)
-            self.pemicro.connect(PEMicroInterfaces.SWD)
-            self.pemicro.set_debug_frequency(value_to_int(self.options.get("frequency", 100000)))
-            self.clear_sticky_errors()
-            self.power_up_target()
-
-        except PEMicroException as exc:
-            raise SPSDKDebugProbeError(
-                f"Pemicro cannot establish  communication with target({str(exc)})."
-            ) from exc
-
-    def close(self) -> None:
-        """Close Pemicro interface.
-
-        The Pemicro closing function for SPSDK library to support various DEBUG PROBES.
-        """
-        if self.pemicro:
-            self.pemicro.close()
-
-    def coresight_reg_read(self, access_port: bool = True, addr: int = 0) -> int:
-        """Read coresight register over Pemicro interface.
-
-        The Pemicro read coresight register function for SPSDK library to support various DEBUG PROBES.
-
-        :param access_port: if True, the Access Port (AP) register will be read(default), otherwise the Debug Port
-        :param addr: the register address
-        :return: The read value of addressed register (4 bytes)
-        :raises SPSDKDebugProbeTransferError: The IO operation failed
-        :raises SPSDKDebugProbeNotOpenError: The Pemicro probe is NOT opened
-        """
-        if self.pemicro is None:
-            raise SPSDKDebugProbeNotOpenError("The Pemicro debug probe is not opened yet")
-
-        try:
-            if access_port:
-                ap_ix = (addr & self.APSEL_APBANKSEL) >> self.APSEL_SHIFT
-                ret = self.pemicro.read_ap_register(apselect=ap_ix, addr=addr)
-            else:
-                ret = self.pemicro.read_dp_register(addr=addr)
-            return ret
-        except PEMicroException as exc:
-            self._reinit_target()
-            raise SPSDKDebugProbeTransferError(
-                f"The Coresight read operation failed({str(exc)})."
-            ) from exc
-
-    def coresight_reg_write(self, access_port: bool = True, addr: int = 0, data: int = 0) -> None:
-        """Write coresight register over Pemicro interface.
-
-        The Pemicro write coresight register function for SPSDK library to support various DEBUG PROBES.
-
-        :param access_port: if True, the Access Port (AP) register will be write(default), otherwise the Debug Port
-        :param addr: the register address
-        :param data: the data to be written into register
-        :raises SPSDKDebugProbeTransferError: The IO operation failed
-        :raises SPSDKDebugProbeNotOpenError: The Pemicro probe is NOT opened
-        """
-        if self.pemicro is None:
-            raise SPSDKDebugProbeNotOpenError("The Pemicro debug probe is not opened yet")
-
-        try:
-            if access_port:
-                ap_ix = (addr & self.APSEL_APBANKSEL) >> self.APSEL_SHIFT
-                self.pemicro.write_ap_register(apselect=ap_ix, addr=addr, value=data)
-            else:
-                self.pemicro.write_dp_register(addr=addr, value=data)
-
-        except PEMicroException as exc:
-            self._reinit_target()
-            raise SPSDKDebugProbeTransferError(
-                f"The Coresight write operation failed({str(exc)})."
-            ) from exc
-
-    def assert_reset_line(self, assert_reset: bool = False) -> None:
-        """Control reset line at a target.
-
-        :param assert_reset: If True, the reset line is asserted(pulled down), if False the reset line is not affected.
-        :raises SPSDKDebugProbeNotOpenError: The Pemicro debug probe is not opened yet
-        :raises SPSDKDebugProbeError: The PyPEMicro probe RESET function failed
-        """
-        if self.pemicro is None:
-            raise SPSDKDebugProbeNotOpenError("The Pemicro debug probe is not opened yet")
-
-        try:
-            if assert_reset:
-                self.pemicro.control_reset_line(True)
-            else:
-                self.pemicro.control_reset_line(False)
-        except PEMicroException as exc:
-            raise SPSDKDebugProbeError(f"Pemicro reset operation failed: {str(exc)}") from exc
diff --git a/tools/approved_packages.json b/tools/approved_packages.json
index 37fdb50..7cfbe92 100644
--- a/tools/approved_packages.json
+++ b/tools/approved_packages.json
@@ -743,24 +743,12 @@
             "home_page": "https://github.com/pyocd/pyOCD",
             "spdx": "Apache-2.0"
         },
-        {
-            "name": "pyocd-pemicro",
-            "license": "BSD-3-Clause",
-            "home_page": "https://github.com/pyocd/pyocd-pemicro",
-            "spdx": "BSD-3-Clause"
-        },
         {
             "name": "pyparsing",
             "license": "",
             "home_page": "https://github.com/pyparsing/pyparsing",
             "spdx": "MIT"
         },
-        {
-            "name": "pypemicro",
-            "license": "BSD-3-Clause",
-            "home_page": "https://github.com/nxpmicro/pypemicro",
-            "spdx": "BSD-3-Clause"
-        },
         {
             "name": "pyreadline3",
             "license": "BSD",
diff --git a/tools/gitcov-defaults.ini b/tools/gitcov-defaults.ini
index 5fcb3eb..a2c72ea 100644
--- a/tools/gitcov-defaults.ini
+++ b/tools/gitcov-defaults.ini
@@ -1,12 +1,11 @@
 [gitcov]
-skip-files = 
+skip-files =
     sdp/interfaces,
     mboot/interfaces,
     spsdk/apps,
     spsdk/dat/dm_commands.py,
     spsdk/dat/debug_mailbox.py,
     spsdk/debuggers/debug_probe_jlink.py,
-    spsdk/debuggers/debug_probe_pemicro.py,
     spsdk/debuggers/debug_probe_pyocd.py,
     spsdk/debuggers/debug_probe_trace32.py
 
-- 
2.43.2

